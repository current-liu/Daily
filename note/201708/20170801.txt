##automatic merge failed
<<<<<<<< HEAD
你写的代码
===============
别人写的代码
>>>>>>>>>>>>>>> sdhqd128dqwenasjdq

这种冲突首先先分析你们俩个的代码是实现相同功能而写的重复的代码还是各自实现的不同的功能的代码。如果是重复代码：两个二选一删除一个，然后再把这些冲突标示符删除即可；
如果不是重复代码，两个都需要保留，只把冲突符号（红色部分）删除即可。
工程编译通过之后就可以重新提交了，这个时候还需要从头执行：

修改完成后还是：

1.2.1 git add .

1.2.2 git commit -m “给你的保存起一个名字"

1.2.3 git pull 把服务器代码拉下来跟你本地代码合并

1.2.4 git push 把合并好的最新代码推送到服务器端

##序列化操作
	应该考虑保存爬虫运行日志，以供分析处理

##进程和线程
使用multiprocessing模块创建多进程，该模块还提供了一个pool类来代表进程池对象

###进程间通信




#单元测试unittest单元测试unittest单元测试unittest
Bug:

	doc = html_download.downloadPage(url)
            if doc == "download error" or doc == "403 Forbidden":
                url_manager.remove_old_review_urls(identify_url)
                url_manager.add_new_review_url(identify_url)
                u_test = url_manager.new_review_urls
                print doc
                continue
其中：

	url_manager.add_new_review_url(identify_url)
未实现功能，反复分析发现是因为该方法里有个判断，

	if url not in new_review_urls and url not in old_review_urls:
所以，得加上

	url_manager.remove_old_review_urls(identify_url)
自己修的墙把自己也拦住了

for key 'PRIMARY'

##设置requests的参数

max_retries=5
timeout=2